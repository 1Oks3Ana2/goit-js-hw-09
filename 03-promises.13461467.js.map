{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAUMC,EAAUC,SAASC,cAAc,SAEvCF,EAAQG,iBAAiB,UAAU,SAAAC,GACjCA,EAAEC,iBAWF,IAPA,IAAMC,EAAQC,OAAOP,EAAQQ,SAASC,MAAMC,OACtCC,EAAOJ,OAAOP,EAAQQ,SAASG,KAAKD,OACpCE,EAASL,OAAOP,EAAQQ,SAASI,OAAOF,OAE1CG,EAAW,EACXC,EAAeR,EAEVS,EAAI,EAAGA,GAAKH,EAAQG,GAAK,GAChCF,GAAYE,EAEZD,GAAgBH,EAiBX,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAE9BC,EAAqCC,YAArCD,SAAoBb,EAAiBc,YAAjBd,MAI5Be,YAAW,WACLL,GACFF,EAAQ,CAAEK,WAAUb,UAKtBS,EAAO,CAAEI,WAAUb,S,GAElBA,E,KA9BAgB,MAAK,SAAAC,G,IAAGJ,EAAQI,EAARJ,SAAUb,EAAKiB,EAALjB,MACjBkB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfR,EAAS,QAAYQ,OAANrB,EAAM,M,IAGjDsB,OAAM,SAAAL,G,IAAGJ,EAAQI,EAARJ,SAAUb,EAAKiB,EAALjB,MAClBkB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAuCF,OAAfR,EAAS,QAAYQ,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   submitBtn: document.querySelector('[type=\"submit\"]'),\n//   firstDelayInput: document.querySelector('[name=\"delay\"]'),\n//   stepInput: document.querySelector('[name=\"step\"]'),\n//   amountInput: document.querySelector('[name=\"amount\"]'),\n// };\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', e => {\n  e.preventDefault();\n\n  // console.log(formRef.elements);\n\n  const delay = Number(formRef.elements.delay.value);\n  const step = Number(formRef.elements.step.value);\n  const amount = Number(formRef.elements.amount.value);\n\n  let position = 0;\n  let promiseDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    position += i;\n\n    promiseDelay += step;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    const { position: position, delay: delay } = promiseData;\n\n    // const { position, delay } = promiseData;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Notiflix.Notify.success(\n        //   `✅ Fulfilled promise ${position} in ${delay}ms`\n        // );\n      }\n      reject({ position, delay });\n      // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","addEventListener","e","preventDefault","delay1","Number","elements","delay","value","step","amount","position1","promiseDelay","i","Promise","resolve","reject","shouldResolve","Math","random","position","promiseData","setTimeout","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.13461467.js.map"}