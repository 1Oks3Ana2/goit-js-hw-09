{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAUA,MAAMC,EAAUC,SAASC,cAAc,SAiCvC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAMtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE1BA,EAAM,G,CA7CbL,EAAQa,iBAAiB,UAAUC,IACjCA,EAAEC,iBAIF,MAAMC,EAAQC,OAAOjB,EAAQkB,SAASb,MAAMc,OACtCC,EAAOH,OAAOjB,EAAQkB,SAASE,KAAKD,OACpCE,EAASJ,OAAOjB,EAAQkB,SAASG,OAAOF,OAE9C,IAAIG,EAAW,EACXC,EAAeP,EAEnB,IAAK,IAAIQ,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChCF,GAAYE,EAEZD,GAAgBH,EAEhBjB,EAAcmB,EAAUC,GACrBE,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBqB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBxB,QAAiBC,MAAU,IAGnDwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBqB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoB1B,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   submitBtn: document.querySelector('[type=\"submit\"]'),\n//   firstDelayInput: document.querySelector('[name=\"delay\"]'),\n//   stepInput: document.querySelector('[name=\"step\"]'),\n//   amountInput: document.querySelector('[name=\"amount\"]'),\n// };\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', e => {\n  e.preventDefault();\n\n  // console.log(formRef.elements);\n\n  const delay = Number(formRef.elements.delay.value);\n  const step = Number(formRef.elements.step.value);\n  const amount = Number(formRef.elements.amount.value);\n\n  let position = 0;\n  let promiseDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    position += i;\n\n    promiseDelay += step;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Notiflix.Notify.success(\n        //   `✅ Fulfilled promise ${position} in ${delay}ms`\n        // )\n        // const promiseData = {};\n      }\n      reject({ position, delay });\n      // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","elements","value","step","amount","position1","promiseDelay","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.d6b80602.js.map"}