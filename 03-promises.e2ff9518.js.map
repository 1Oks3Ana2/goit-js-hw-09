{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAUA,MAAMC,EAAUC,SAASC,cAAc,SAEvCF,EAAQG,iBAAiB,UAAUC,IACjCA,EAAEC,iBAIF,MAAMC,EAAQC,OAAOP,EAAQQ,SAASC,MAAMC,OACtCC,EAAOJ,OAAOP,EAAQQ,SAASG,KAAKD,OACpCE,EAASL,OAAOP,EAAQQ,SAASI,OAAOF,OAE9C,IAAIG,EAAW,EACXC,EAAeR,EAEnB,IAAK,IAAIS,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChCF,GAAYE,EAEZD,GAAgBH,GAEFE,EAAUC,EAenB,IAAIE,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,IAE9BC,SAAUA,EAAUb,MAAOA,GAAUc,YAI7CC,YAAW,KACLL,GACFF,EAAQ,C,SAAEK,E,MAAUb,IAKtBS,EAAO,C,SAAEI,E,MAAUb,GAAQ,GAE1BA,EAAM,KA9BNgB,MAAK,EAACH,SAAEA,EAAQb,MAAEA,MACjBiB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBN,QAAiBb,MAAU,IAGnDoB,OAAM,EAACP,SAAEA,EAAQb,MAAEA,MAClBiB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBR,QAAiBb,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   submitBtn: document.querySelector('[type=\"submit\"]'),\n//   firstDelayInput: document.querySelector('[name=\"delay\"]'),\n//   stepInput: document.querySelector('[name=\"step\"]'),\n//   amountInput: document.querySelector('[name=\"amount\"]'),\n// };\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', e => {\n  e.preventDefault();\n\n  // console.log(formRef.elements);\n\n  const delay = Number(formRef.elements.delay.value);\n  const step = Number(formRef.elements.step.value);\n  const amount = Number(formRef.elements.amount.value);\n\n  let position = 0;\n  let promiseDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    position += i;\n\n    promiseDelay += step;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    const { position: position, delay: delay } = promiseData;\n\n    // const { position, delay } = promiseData;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Notiflix.Notify.success(\n        //   `✅ Fulfilled promise ${position} in ${delay}ms`\n        // );\n      }\n      reject({ position, delay });\n      // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","addEventListener","e","preventDefault","delay1","Number","elements","delay","value","step","amount","position1","promiseDelay","i","Promise","resolve","reject","shouldResolve","Math","random","position","promiseData","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.e2ff9518.js.map"}